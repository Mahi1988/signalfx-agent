// Code generated by monitor-code-gen. DO NOT EDIT.

package {{.goPackage}}

import (
{{if .metrics}}
	"github.com/signalfx/golib/datapoint"
{{- end}}
	"github.com/signalfx/signalfx-agent/internal/monitors"
)

{{if (len .monitors) eq 1 }}
const {{"monitorType" | formatVariable}} = "{{(index .monitors 0).MonitorType}}"
{{end}}

{{with .groupMetricsMap}}
const (
{{- range $group, $metrics := . }}
	{{(printf "group.%s" $group) | formatVariable}} = "{{$group}}"
{{- end}}
)
{{end}}

var {{"groupSet" | formatVariable}} = map[string]bool {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: true,
{{- end}}
}

{{with .metrics}}
const (
{{- range .}}
	{{.Name | formatVariable}} = "{{.Name}}"
{{- with .Alias}}
	{{. | formatVariable}} = "{{.}}"
{{- end}}
{{- end}}
)
{{end}}

var {{"metricSet" | formatVariable}} = map[string]monitors.MetricInfo {
{{- range .metrics}}
	{{.Name | formatVariable}}: {Type: {{.Type | convertMetricType}}},
{{- end}}
}

var {{"includedMetrics" | formatVariable}} = map[string]bool {
{{- range .metrics}}
{{- if .Included}}
	{{.Name | formatVariable}}: true,
{{- with .Alias}}
	{{. | formatVariable}}: true,
{{- end}}
{{- end}}
{{- end}}
}

var {{"groupMetricsMap" | formatVariable}} = map[string][]string {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: []string {
		{{- range $metrics}}
		{{. | formatVariable}},
		{{- end}}
	},
{{- end}}
}

{{range .monitors}}
var {{if gt (len $.monitors) 1 -}}
{{- (printf "%s.%s" .MonitorType "monitorMetadata") | formatVariable -}}
{{else -}}
monitorMetadata{{end}} = monitors.Metadata{
	MonitorType: "{{.MonitorType}}",
	IncludedMetrics: {{"includedMetrics" | formatVariable}},
	Metrics: {{"metricSet" | formatVariable}},
	MetricsExhaustive: {{.MetricsExhaustive}},
	Groups: {{"groupSet" | formatVariable}},
	GroupMetricsMap: {{"groupMetricsMap" | formatVariable}},
	SendAll: {{ .SendAll }},
}
{{end}}
